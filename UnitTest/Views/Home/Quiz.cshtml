@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Quiz";
}

<div class="container">
    <div class="quiz-container">
        <h2 class="quiz-header">Unit Testing in .NET Quiz</h2>

        <form method="post" action="/Home/Quiz" id="quizForm">
            <div class="mb-4">
                <label class="form-label question-label">
                    <span>Q1:</span> What is the primary goal of unit testing?
                </label>
                <div class="options-container">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question1" value="A" id="question1-optionA">
                        <label class="form-check-label" for="question1-optionA">
                            To test all the dependencies of an application.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question1" value="B" id="question1-optionB">
                        <label class="form-check-label" for="question1-optionB">
                            To verify individual units of a program function correctly.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question1" value="C" id="question1-optionC">
                        <label class="form-check-label" for="question1-optionC">
                            To ensure the database schema is correct.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question1" value="D" id="question1-optionD">
                        <label class="form-check-label" for="question1-optionD">
                            To check user interface responsiveness.
                        </label>
                    </div>
                </div>
            </div>

            <div class="mb-4">
                <label class="form-label question-label">
                    <span>Q2:</span> In unit testing, what is a "unit"?
                </label>
                <div class="options-container">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question2" value="A" id="question2-optionA">
                        <label class="form-check-label" for="question2-optionA">
                            The entire application.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question2" value="B" id="question2-optionB">
                        <label class="form-check-label" for="question2-optionB">
                            A single test case.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question2" value="C" id="question2-optionC">
                        <label class="form-check-label" for="question2-optionC">
                            The smallest testable part of an application.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question2" value="D" id="question2-optionD">
                        <label class="form-check-label" for="question2-optionD">
                            A deployment package.
                        </label>
                    </div>
                </div>
            </div>

            <div class="mb-4">
                <label class="form-label question-label">
                    <span>Q3:</span> Which .NET framework attribute is used to mark a unit test in xUnit?
                </label>
                <div class="options-container">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question3" value="A" id="question3-optionA">
                        <label class="form-check-label" for="question3-optionA">
                            Fact
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question3" value="B" id="question3-optionB">
                        <label class="form-check-label" for="question3-optionB">
                            Test
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question3" value="C" id="question3-optionC">
                        <label class="form-check-label" for="question3-optionC">
                            UnitTest
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question3" value="D" id="question3-optionD">
                        <label class="form-check-label" for="question3-optionD">
                            Scenario
                        </label>
                    </div>
                </div>
            </div>

            <div class="mb-4">
                <label class="form-label question-label">
                    <span>Q4:</span> What are the three main components of a unit test?
                </label>
                <div class="options-container">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question4" value="A" id="question4-optionA">
                        <label class="form-check-label" for="question4-optionA">
                            Arrange, Execute, Assert
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question4" value="B" id="question4-optionB">
                        <label class="form-check-label" for="question4-optionB">
                            Arrange, Act, Assert
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question4" value="C" id="question4-optionC">
                        <label class="form-check-label" for="question4-optionC">
                            Setup, Run, Test
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question4" value="D" id="question4-optionD">
                        <label class="form-check-label" for="question4-optionD">
                            Plan, Develop, Validate
                        </label>
                    </div>
                </div>
            </div>

            <div class="mb-4">
                <label class="form-label question-label">
                    <span>Q5:</span> What does the ‘Assert‘ step in a unit test do?
                </label>
                <div class="options-container">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question5" value="A" id="question5-optionA">
                        <label class="form-check-label" for="question5-optionA">
                            Prepares the test environment.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question5" value="B" id="question5-optionB">
                        <label class="form-check-label" for="question5-optionB">
                            Executes the method being tested.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question5" value="C" id="question5-optionC">
                        <label class="form-check-label" for="question5-optionC">
                            Verifies the outcome matches expectations.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question5" value="D" id="question5-optionD">
                        <label class="form-check-label" for="question5-optionD">
                            Cleans up after the test.
                        </label>
                    </div>
                </div>
            </div>

            <div class="mb-4">
                <label class="form-label question-label">
                    <span>Q6:</span> What is a key benefit of unit testing?
                </label>
                <div class="options-container">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question6" value="A" id="question6-optionA">
                        <label class="form-check-label" for="question6-optionA">
                            It eliminates the need for integration testing.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question6" value="B" id="question6-optionB">
                        <label class="form-check-label" for="question6-optionB">
                            It ensures code is written faster.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question6" value="C" id="question6-optionC">
                        <label class="form-check-label" for="question6-optionC">
                            It catches bugs early in the development process.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question6" value="D" id="question6-optionD">
                        <label class="form-check-label" for="question6-optionD">
                            It guarantees no bugs in production.
                        </label>
                    </div>
                </div>
            </div>

            <div class="mb-4">
                <label class="form-label question-label">
                    <span>Q7:</span>  Why should unit tests be independent?
                </label>
                <div class="options-container">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question7" value="A" id="question7-optionA">
                        <label class="form-check-label" for="question7-optionA">
                            To ensure they run in parallel without issues.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question7" value="B" id="question7-optionB">
                        <label class="form-check-label" for="question7-optionB">
                            To avoid conflicts between tests.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question7" value="C" id="question7-optionC">
                        <label class="form-check-label" for="question7-optionC">
                            To ensure repeatability and reliability.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question7" value="D" id="question7-optionD">
                        <label class="form-check-label" for="question7-optionD">
                            All of the above.
                        </label>
                    </div>
                </div>
            </div>

            <div class="mb-4">
                <label class="form-label question-label">
                    <span>Q8:</span>   What tool is mentioned for mocking dependencies in .NET?
                </label>
                <div class="options-container">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question8" value="A" id="question8-optionA">
                        <label class="form-check-label" for="question8-optionA">
                            NUnit
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question8" value="B" id="question8-optionB">
                        <label class="form-check-label" for="question8-optionB">
                            Moq
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question8" value="C" id="question8-optionC">
                        <label class="form-check-label" for="question8-optionC">
                            MSTest
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question8" value="D" id="question8-optionD">
                        <label class="form-check-label" for="question8-optionD">
                            xUnit
                        </label>
                    </div>
                </div>
            </div>

            <div class="mb-4">
                <label class="form-label question-label">
                    <span>Q9:</span>  Which best practice ensures unit tests are meaningful?
                </label>
                <div class="options-container">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question9" value="A" id="question9-optionA">
                        <label class="form-check-label" for="question9-optionA">
                            Test multiple behaviors in a single test case.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question9" value="B" id="question9-optionB">
                        <label class="form-check-label" for="question9-optionB">
                            Use descriptive test names
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question9" value="C" id="question9-optionC">
                        <label class="form-check-label" for="question9-optionC">
                            Depend on external databases for test data.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question9" value="D" id="question9-optionD">
                        <label class="form-check-label" for="question9-optionD">
                            Write long and complex test cases.
                        </label>
                    </div>
                </div>
            </div>

            <div class="mb-4">
                <label class="form-label question-label">
                    <span>Q10:</span> Which attribute in xUnit is used for parameterized tests?
                </label>
                <div class="options-container">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question10" value="A" id="question10-optionA">
                        <label class="form-check-label" for="question10-optionA">
                            InlineTest
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question10" value="B" id="question10-optionB">
                        <label class="form-check-label" for="question10-optionB">
                            Theory
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question10" value="C" id="question10-optionC">
                        <label class="form-check-label" for="question10-optionC">
                            ParameterizedTest
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question10" value="D" id="question10-optionD">
                        <label class="form-check-label" for="question10-optionD">
                            DataRow
                        </label>
                    </div>
                </div>
            </div>

            <div class="mb-4">
                <label class="form-label question-label">
                    <span>Q11:</span>  What does mocking achieve in unit testing?
                </label>
                <div class="options-container">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question11" value="A" id="question11-optionA">
                        <label class="form-check-label" for="question11-optionA">
                            It speeds up application deployment.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question11" value="B" id="question11-optionB">
                        <label class="form-check-label" for="question11-optionB">
                            It isolates the unit under test.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question11" value="C" id="question11-optionC">
                        <label class="form-check-label" for="question11-optionC">
                            It replaces unit tests with integration tests.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question11" value="D" id="question11-optionD">
                        <label class="form-check-label" for="question11-optionD">
                            It combines multiple unit tests.
                        </label>
                    </div>
                </div>
            </div>

            <div class="mb-4">
                <label class="form-label question-label">
                    <span>Q12:</span>  What is an example of an edge case in unit testing?
                </label>
                <div class="options-container">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question12" value="A" id="question12-optionA">
                        <label class="form-check-label" for="question12-optionA">
                            Testing with typical input values.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question12" value="B" id="question12-optionB">
                        <label class="form-check-label" for="question12-optionB">
                            Testing with invalid or extreme input values.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question12" value="C" id="question12-optionC">
                        <label class="form-check-label" for="question12-optionC">
                            Skipping the ‘Assert‘ step.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question12" value="D" id="question12-optionD">
                        <label class="form-check-label" for="question12-optionD">
                            Testing only the happy path.
                        </label>
                    </div>
                </div>
            </div>

            <div class="mb-4">
                <label class="form-label question-label">
                    <span>Q13:</span> What is the purpose of the ‘Mock.Verify‘ method in Moq?
                </label>
                <div class="options-container">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question13" value="A" id="question13-optionA">
                        <label class="form-check-label" for="question13-optionA">
                            To run the test multiple times.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question13" value="B" id="question13-optionB">
                        <label class="form-check-label" for="question13-optionB">
                            To confirm a mock method was called.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question13" value="C" id="question13-optionC">
                        <label class="form-check-label" for="question13-optionC">
                            To simulate a dependency’s behavior.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question13" value="D" id="question13-optionD">
                        <label class="form-check-label" for="question13-optionD">
                            To clean up resources.
                        </label>
                    </div>
                </div>
            </div>

            <div class="mb-4">
                <label class="form-label question-label">
                    <span>Q14:</span>  Which of the following frameworks are used for unit testing in .NET?
                </label>
                <div class="options-container">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question14" value="A" id="question14-optionA">
                        <label class="form-check-label" for="question14-optionA">
                            Moq and Entity Framework
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question14" value="B" id="question14-optionB">
                        <label class="form-check-label" for="question14-optionB">
                            NUnit, xUnit, and MSTest
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question14" value="C" id="question14-optionC">
                        <label class="form-check-label" for="question14-optionC">
                            ASP.NET and xUnit
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question14" value="D" id="question14-optionD">
                        <label class="form-check-label" for="question14-optionD">
                            None of the above.
                        </label>
                    </div>
                </div>
            </div>

            <div class="mb-4">
                <label class="form-label question-label">
                    <span>Q15:</span> What is the benefit of writing modular code for unit testing?
                </label>
                <div class="options-container">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question15" value="A" id="question15-optionA">
                        <label class="form-check-label" for="question15-optionA">
                            It ensures better code performance.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question15" value="B" id="question15-optionB">
                        <label class="form-check-label" for="question15-optionB">
                            It simplifies testing and maintenance.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question15" value="C" id="question15-optionC">
                        <label class="form-check-label" for="question15-optionC">
                            It removes the need for refactoring.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question15" value="D" id="question15-optionD">
                        <label class="form-check-label" for="question15-optionD">
                            It guarantees full system integration.
                        </label>
                    </div>
                </div>
            </div>

            <div class="mb-4">
                <label class="form-label question-label">
                    <span>Q16:</span> How can unit tests act as documentation?
                </label>
                <div class="options-container">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question16" value="A" id="question16-optionA">
                        <label class="form-check-label" for="question16-optionA">
                            By explaining code logic to users.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question16" value="B" id="question16-optionB">
                        <label class="form-check-label" for="question16-optionB">
                            By showing expected behavior of methods/classes.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question16" value="C" id="question16-optionC">
                        <label class="form-check-label" for="question16-optionC">
                            By replacing user manuals.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question16" value="D" id="question16-optionD">
                        <label class="form-check-label" for="question16-optionD">
                            By reducing the number of comments in code.
                        </label>
                    </div>
                </div>
            </div>

            <div class="mb-4">
                <label class="form-label question-label">
                    <span>Q17:</span> What is an example of a good unit test name?
                </label>
                <div class="options-container">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question17" value="A" id="question17-optionA">
                        <label class="form-check-label" for="question17-optionA">
                            Test1
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question17" value="B" id="question17-optionB">
                        <label class="form-check-label" for="question17-optionB">
                            CheckValue
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question17" value="C" id="question17-optionC">
                        <label class="form-check-label" for="question17-optionC">
                            CalculateTotal NoItems ReturnsZero
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question17" value="D" id="question17-optionD">
                        <label class="form-check-label" for="question17-optionD">
                            RunAllTests
                        </label>
                    </div>
                </div>
            </div>

            <div class="mb-4">
                <label class="form-label question-label">
                    <span>Q18:</span>  Why is it essential to test edge cases?
                </label>
                <div class="options-container">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question18" value="A" id="question18-optionA">
                        <label class="form-check-label" for="question18-optionA">
                            To check database integration.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question18" value="B" id="question18-optionB">
                        <label class="form-check-label" for="question18-optionB">
                            To ensure the application can handle extreme or unexpected inputs.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question18" value="C" id="question18-optionC">
                        <label class="form-check-label" for="question18-optionC">
                            To reduce the number of tests.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question18" value="D" id="question18-optionD">
                        <label class="form-check-label" for="question18-optionD">
                            To validate deployment pipelines.
                        </label>
                    </div>
                </div>
            </div>

            <div class="mb-4">
                <label class="form-label question-label">
                    <span>Q19:</span>   What is the primary challenge of unit testing legacy code?
                </label>
                <div class="options-container">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question19" value="A" id="question19-optionA">
                        <label class="form-check-label" for="question19-optionA">
                            Lack of testing frameworks.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question19" value="B" id="question19-optionB">
                        <label class="form-check-label" for="question19-optionB">
                            Difficulty in refactoring tightly coupled code.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question19" value="C" id="question19-optionC">
                        <label class="form-check-label" for="question19-optionC">
                            Limited community support.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question19" value="D" id="question19-optionD">
                        <label class="form-check-label" for="question19-optionD">
                            High cost of testing tools.
                        </label>
                    </div>
                </div>
            </div>

            <div class="mb-4">
                <label class="form-label question-label">
                    <span>Q20:</span> Which statement about test coverage is correct?
                </label>
                <div class="options-container">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question20" value="A" id="question20-optionA">
                        <label class="form-check-label" for="question20-optionA">
                            Unit tests guarantee full system functionality.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question20" value="B" id="question20-optionB">
                        <label class="form-check-label" for="question20-optionB">
                             High test coverage ensures quality over quantity.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question20" value="C" id="question20-optionC">
                        <label class="form-check-label" for="question20-optionC">
                            Unit tests only test individual components, not entire systems.
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question20" value="D" id="question20-optionD">
                        <label class="form-check-label" for="question20-optionD">
                            Integration tests are unnecessary with unit tests.
                        </label>
                    </div>
                </div>
            </div>

            <button type="submit" class="btn quiz-button">Submit Quiz</button>
        </form>

        <div class="mt-4">
            @if (ViewBag.Score != null)
            {
                <p>Your Score: @ViewBag.Score/20</p>
            }
        </div>
    </div>
</div>

<style>
    body {
        background-color: #f4f4f9;
    }

    .quiz-container {
        background-color: white;
        border-radius: 8px;
        padding: 30px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .quiz-header {
        color: #106861;
        text-align: center;
        margin-bottom: 20px;
    }

    .quiz-button {
        background-color: #106861;
        color: white;
        width: 100%;
        padding: 15px;
        font-size: 16px;
    }

        .quiz-button:hover {
            background-color: #065b44;
        }

    .question-label {
        font-size: 1.1rem;
        color: #106861;
        font-weight: bold;
    }

    .options-container .form-check {
        padding-left: 20px;
        margin-bottom: 10px;
    }

    .form-check-input {
        margin-top: 5px;
        margin-right: 10px;
    }

    .form-check-label {
        font-size: 1rem;
        color: #333;
    }

    .quiz-container .mb-4 {
        margin-bottom: 20px;
    }

    .quiz-container .btn {
        border-radius: 5px;
        font-weight: bold;
    }

    /* Hover effect for the options */
    .form-check:hover {
        background-color: #f1f1f1;
        border-radius: 5px;
    }

    .form-check-input:checked + .form-check-label {
        color: #106861;
        font-weight: bold;
    }
</style>
