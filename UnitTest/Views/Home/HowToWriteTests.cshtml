@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "How to Write Unit Tests";
}

<h2>Unit Test Guidelines</h2>
<div class="test-guidelines">
    <ul>
        <li><strong>Test One Thing at a Time:</strong> Ensure each test verifies a single behavior. This makes tests easier to maintain and debug.</li>
        <li><strong>Use Descriptive Test Names:</strong> A good unit test name should clearly indicate the expected behavior.</li>
        <li><strong>Mock Dependencies:</strong> Isolate the unit under test by mocking or stubbing external dependencies like databases or web services.</li>
        <li><strong>Test Edge Cases:</strong> Ensure your application can handle a wide range of inputs, including extreme and invalid values.</li>
        <li><strong>Make Tests Repeatable and Independent:</strong> Tests should be independent of external states and give the same result each time.</li>
        <li><strong>Keep Tests Small and Focused:</strong> Tests should focus on specific functionality and be quick to run.</li>
    </ul>
</div>

<h2>Example: Testing a Square Function</h2>
<p>Here is a simple example of unit testing a method that calculates the square of a number in .NET using xUnit:</p>

<div class="example-code">
    <pre>
public class MathOperations
{
    public int Square(int number)
    {
        return number * number;
    }
}

public class MathOperationsTests
{
    [Fact]
    public void TestSquare()
    {
        // Arrange
        var mathOperations = new MathOperations();
        int input = 5;
        int expectedResult = 25;

        // Act
        int result = mathOperations.Square(input);

        // Assert
        Assert.Equal(expectedResult, result); // Verify result is as expected
    }
}
        </pre>
</div>

<p>In this example, the test verifies that the Square method correctly calculates the square of the number.</p>
    </div>