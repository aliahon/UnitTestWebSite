@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "What is Unit Testing?";
}


<div class="container mt-5">
        <div class="row">
            <!-- Introduction Section -->
            <div class="col-12 text-center mb-4">
                <h1 class="text-white p-3 rounded" style="background-color: #106861;">What is Unit Testing?</h1>
                <p class="lead mt-3">
                    Unit testing is a software testing practice where individual components, or "units," of a program are tested independently to ensure they function as expected.
                </p>
                <div class="mt-4">
                    <!-- Local Video Player -->
                    <video controls width="100%" style="max-width: 800px; border: 2px solid #106861; border-radius: 8px;">
                        <source src="~/videos/u.mp4" type="video/mp4">
                        Your browser does not support the video tag.
                    </video>
                </div>
            </div>
        </div>
    </div>
    <!-- Main Content Section -->
        <!-- Main Content Section -->
    <div class="row">
        <div class="col-12">
            <h2 class="text-success">Key Concepts and Examples</h2>
            <p>
                A "unit" typically refers to the smallest testable part of an application, such as a function, method, or class. The goal of unit testing is to verify that each unit performs correctly, which helps in:
            </p>
            <ul class="list-group list-group-flush">
                <li class="list-group-item">Identifying bugs early</li>
                <li class="list-group-item">Simplifying code maintenance</li>
                <li class="list-group-item">Providing confidence in the overall stability of the code</li>
            </ul>

            <h3 class="mt-4 text-success">Example Code</h3>
            <p>
                A unit test would check if this method correctly adds numbers under various
                scenarios, such as positive numbers, negative numbers, or zero.
            </p>
            
            <div class="card mb-4">
                <div class="card-body">
                    <pre class="bg-light p-3 rounded" style="font-size: 1.1em; white-space: pre-wrap;">
<code class="language-csharp">
public int Add(int a, int b)
{
    return a + b;
}

// Unit Test Example
[TestMethod]
public void Add_ShouldReturnSum_ForValidInputs()
{
    var service = new MathService();
    var result = service.Add(2, 3);
    Assert.AreEqual(5, result);
}
</code>
                    </pre>
                </div>
            </div>

            <h3 class="mt-4 text-success">Why is Unit Testing Important?</h3>
            <p>
                Unit testing is a fundamental practice in software development, providing numerous benefits that contribute to the quality, maintainability, and reliability of applications. Below are some key advantages of unit testing, explained with practical examples using .NET Framework.
            </p>
            <ol class="list-group list-group-numbered">
                <li class="list-group-item">Early Bug Detection</li>
                <li class="list-group-item">Ensures Correct Functionality</li>
                <li class="list-group-item">Simplifies Refactoring</li>
                <li class="list-group-item">Improves Code Design</li>
                <li class="list-group-item">Acts as Documentation</li>
            </ol>

            <h4 class="mt-4 text-success">Detailed Example: Login Service</h4>
            <div class="card mb-4">
                <div class="card-body">
                    <pre class="bg-light p-3 rounded" style="font-size: 1.1em; white-space: pre-wrap;">
<code class="language-csharp">
public class LoginService
{
    public bool Authenticate(string username, string password)
    {
        return username == "admin" && password == "password";
    }
}

// Unit Test Example
[TestClass]
public class LoginServiceTests
{
    [TestMethod]
    public void Authenticate_ShouldReturnTrue_ForValidCredentials()
    {
        var service = new LoginService();
        var result = service.Authenticate("admin", "password");
        Assert.IsTrue(result);
    }
}
</code>
                    </pre>
                </div>
            </div>

            <h3 class="mt-4 text-success">Detailed Example: Discount Calculator</h3>
            <div class="card mb-4">
                <div class="card-body">
                    <pre class="bg-light p-3 rounded" style="font-size: 1.1em; white-space: pre-wrap;">
<code class="language-csharp">
public class DiscountCalculator
{
    public decimal CalculateDiscount(string customerType, decimal amount)
    {
        return customerType == "Premium" ? amount * 0.2m : amount * 0.1m;
    }
}

// Unit Test Example
[TestFixture]
public class DiscountCalculatorTests
{
    [TestCase("Premium", 100, 20)]
    [TestCase("Regular", 100, 10)]
    public void CalculateDiscount_ShouldReturnCorrectDiscount(string customerType, decimal amount, decimal expected)
    {
        var calculator = new DiscountCalculator();
        var result = calculator.CalculateDiscount(customerType, amount);
        Assert.AreEqual(expected, result);
    }
}
</code>
                    </pre>
                </div>
            </div>

            <h3 class="mt-4 text-success">Detailed Example: Math Service</h3>
            <div class="card mb-4">
                <div class="card-body">
                    <pre class="bg-light p-3 rounded" style="font-size: 1.1em; white-space: pre-wrap;">
<code class="language-csharp">
public class MathService
{
    public int Add(string a, string b)
    {
        return int.Parse(a) + int.Parse(b);
    }
}

// Unit Test Example
[TestClass]
public class MathServiceTests
{
    [TestMethod]
    public void Add_ShouldReturnSum_ForValidInputs()
    {
        var service = new MathService();
        var result = service.Add("2", "3");
        Assert.AreEqual(5, result);
    }
}
</code>
                    </pre>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Optional Syntax Highlighting with Prism.js or Highlight.js -->
<script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism.min.css">
